{"version":3,"sources":["webpack://aiAgents/webpack/universalModuleDefinition","webpack://aiAgents/webpack/bootstrap","webpack://aiAgents/./lib/core/AgentController.js","webpack://aiAgents/./lib/index.js","webpack://aiAgents/./lib/core/Problem.js","webpack://aiAgents/./lib/core/Agent.js"],"names":["AgentController","constructor","agents","world0","world","actions","data","states","setup","parameter","problem","JSON","parse","stringify","register","agent","state0","getID","unregister","input","id","stop","start","callbacks","loop","Object","values","forEach","goalTest","receive","perceptionForAgent","getData","action","send","push","agentID","update","onTurn","finishAll","onFinish","getActions","module","exports","Problem","require","Agent","initialState","controller","solution","addAgent","agentClass","solve","name","Math","round","random","state","perception","table","inputs","getLocalName"],"mappings":"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","file":"ai-agents.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"aiAgents\"] = factory();\n\telse\n\t\troot[\"aiAgents\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","\nclass AgentController {\n    constructor() {\n        this.agents = {};\n        this.world0 = null;\n        this.world = null;\n        this.actions = [];\n        this.data = { states: [], world: {} };\n    }\n    /**\n     * Setup the configuration for the agent controller\n     * @param {Object} parameter \n     */\n    setup(parameter) {\n        this.problem = parameter.problem;\n        this.world0 = JSON.parse(JSON.stringify(parameter.world));\n        this.data.world = JSON.parse(JSON.stringify(parameter.world));\n        //this.solution = parameter.solution;\n        //this.update = parameter.update;\n        //this.callbacks = parameter.callbacks;\n        //this.perceptionForAgent = parameter.perceptionForAgent;\n    }\n    /**\n     * Register the given agent in the controller pool. The second parameter stand for the initial state of the agent\n     * @param {Agent} agent \n     * @param {Object} state0 \n     */\n    register(agent, state0) {\n        if (this.agents[agent.getID()]) {\n            throw 'AgentIDAlreadyExists';\n        } else {\n            this.agents[agent.getID()] = agent;\n            this.data.states[agent.getID()] = state0;\n            //TODO conver state0 to an inmutable object\n            agent.setup(state0);\n        }\n    }\n    /**\n     * Remove the given agent from the controller pool\n     * @param {Object} input \n     */\n    unregister(input) {\n        let id = \"\";\n        if (typeof input == 'string') {\n            id = input;\n        } else if (typeof input == 'object') {\n            id = input.getID();\n        } else {\n            throw 'InvalidAgentType';\n        }\n        let agent = this.agents[id];\n        agent.stop();\n        delete this.agents[id];\n    }\n    /**\n     * This function start the virtual life. It will continously execute the actions\n     * given by the agents in response to the perceptions. It stop when the solution function\n     * is satified or when the max number of iterations is reached.\n     * @param {Array} callbacks \n     */\n    start(callbacks = {}) {\n        this.callbacks = callbacks;\n        this.loop();\n    }\n\n    /**\n     * Virtual life loop. At the end of every step it executed the onTurn call back. It could b used for animations of login\n     */\n    loop() {\n        let stop = false;\n        while (!stop) {\n            //Creates a thread for every single agent\n            Object.values(this.agents).forEach(agent => {\n                if (!this.problem.goalTest(this.data)) {\n                    agent.receive(this.problem.perceptionForAgent(this.getData(), agent.getID()));\n                    let action = agent.send();\n                    this.actions.push({ agentID: agent.getID(), action });\n                    this.problem.update(this.data, action, agent.getID());\n                    if (this.problem.goalTest(this.data)) {\n                        stop = true;\n                    } else {\n                        if (this.callbacks.onTurn) this.callbacks.onTurn({ data, action });\n                    }\n                }\n            });\n        }\n        this.finishAll();\n    }\n\n    /**\n     * This function is executed once the virtual life loop is ended. It must stop every single agent in the pool\n     * and execute the onFinish callback \n     */\n    finishAll() {\n        // Stop all the agents\n        Object.values(this.agents).forEach(agent => {\n            //agent.stop();\n            this.unregister(agent);\n        });\n        //Execute the callback\n        if (this.callbacks.onFinish) this.callbacks.onFinish({ actions: this.getActions(), data: this.data });\n    }\n\n    /**\n     * Return a copu of the agent controller data. The returned object contains the data of the problem (world) and the\n     * state of every single agent in the controller pool (states)\n     */\n    getData() {\n        return this.data;\n    }\n    /**\n     * Return the history of the actions performed by the agents during the current virtual life loop\n     */\n    getActions() {\n        return JSON.parse(JSON.stringify(this.actions));\n    }\n\n    /**\n     * This function stop all the threads started by the agent controller and stops registered agents\n     */\n    stop() {\n        this.finishAll();\n    }\n}\n\nmodule.exports = AgentController;","const Problem = require('./core/Problem');\nconst Agent = require('./core/Agent');\nconst AgentController = require('./core/AgentController');\n\nmodule.exports = { Problem, Agent, AgentController };","const AgentController = require('../core/AgentController');\n\n/**\n * This class specifies the problem to be solved\n */\nclass Problem {\n    constructor(initialState) {\n        this.controller = new AgentController();\n    }\n\n    /**\n     * Check if the given solution solves the problem. You must override\n     * @param {Object} solution \n     */\n    goalTest(solution) {}\n    //TODO return boolean\n\n\n    /**\n     * The transition model. Tells how to change the state (data) based on the given actions. You must override\n     * @param {} data \n     * @param {*} action \n     * @param {*} agentID \n     */\n    update(data, action, agentID) {}\n    //TODO modify data\n\n\n    /**\n     * Gives the world representation for the agent at the current stage\n     * @param {*} agentID \n     * @returns and object with the information to be sent to the agent\n     */\n    perceptionForAgent(data, agentID) {}\n    //TODO return the perception\n\n\n    /**\n     * Add a new agent to solve the problem\n     * @param {*} agentID \n     * @param {*} agentClass \n     * @param {*} initialState \n     */\n    addAgent(agentID, agentClass, initialState) {\n        let agent = new agentClass(agentID);\n        this.controller.register(agent, initialState);\n    }\n\n    /**\n     * Solve the given problem\n     * @param {*} problem \n     * @param {*} callbacks \n     */\n    solve(problem, callbacks) {\n        this.controller.setup({ world: problem, problem: this });\n        this.controller.start(callbacks);\n    }\n}\n\nmodule.exports = Problem;","//const tf = require('@tensorflow/tfjs-node');\n\nclass Agent {\n    constructor(name) {\n        this.id = name;\n        if (!name) {\n            this.id = Math.round(Math.random() * 10e8);\n        }\n        this.state = null;\n        this.perception = null;\n        this.table = { \"default\": 0 };\n    }\n\n    /**\n     * Setup of the agent. Could be override by the class extension\n     * @param {*} parameters \n     */\n    setup(initialState = {}) {\n        this.initialState = initialState;\n    }\n    /**\n     * Function that receive and store the perception of the world that is sent by the agent controller. This data is stored internally\n     * in the this.perception variable\n     * @param {Object} inputs \n     */\n    receive(inputs) {\n        this.perception = inputs;\n    }\n\n    /**\n     * Inform to the Agent controller about the action to perform\n     */\n    send() {\n        return table[\"deafult\"];\n    }\n\n    /**\n     * Return the agent id\n     */\n    getLocalName() {\n        return this.id;\n    }\n\n    /**\n      * Return the agent id\n      */\n    getID() {\n        return this.id;\n    }\n\n    /**\n     * Do whatever you do when the agent is stoped. Close connections to databases, write files etc.\n     */\n    stop() {}\n}\n\nmodule.exports = Agent;"],"sourceRoot":""}